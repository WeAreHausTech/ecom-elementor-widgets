name: Create Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number'
        required: true
        default: 'dev'

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
      - name: Install Dependencies
        run: yarn install
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

      - name: Build Widgets
        run: yarn build-widgets

      - name: Copy files to tmp folder
        run: mkdir -p ./tmp && cp -r ./dist ./src ./package.json ./yarn.lock ./README.md ./composer.json ./composer.lock ./livv-ecom-addon.php ./tmp

      - name: Set version in addon.php
        run: |
          VERSION=${{ github.ref }}
          if [[ $VERSION =~ refs/tags/* ]]; then
            VERSION=${VERSION#refs/tags/}
          else
            VERSION=${{ github.event.inputs.version }} # Or a hardcoded default like 'dev'
          fi
          sed -i "s|{{VERSION}}|${VERSION}|g" ./tmp/livv-ecom-addon.php
      
      - name: Set commit date and build date in addon.php
        run: |
          COMMIT_DATE=$(git log -1 --format=%cd --date=format:'%Y-%m-%d %H:%M:%S')
          BUILD_DATE=$(date +"%Y-%m-%d %H:%M:%S")
          sed -i "s|{{COMMIT_DATE}}|${COMMIT_DATE}|g" ./tmp/livv-ecom-addon.php
          sed -i "s|{{BUILD_DATE}}|${BUILD_DATE}|g" ./tmp/livv-ecom-addon.php
        
      - name: Create ZIP file
        run: zip -r ./release.zip ./tmp

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
          draft: false
          prerelease: false
    
      - name: Upload dist.zip to Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release.zip
          asset_name: release.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload tmp folder as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: tmp-folder
          path: ./tmp

  upload:
    name: Upload to staging servers
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        server: 
          - { name: "Hemglass Staging", host: "hemglass.se.staging.haus.se", username: "deploy", private_key: "SERVER_PRIVATE_KEY", target: "/mnt/persist/www/hemglass.se.staging.haus.se/shared/web/app/plugins/ecom-elementor-widgets" }
          - { name: "Livv Staging", host: "livv.se.haus.se", username: "deploy", private_key: "SERVER_PRIVATE_KEY", target: "/mnt/persist/www/livv_test/ecom-elementor-widgets" }
    steps:
      - name: Download tmp folder
        uses: actions/download-artifact@v3
        with:
          name: tmp-folder
          path: ./tmp
          
      # - name: Get SSH Key for server
      #   run: |
      #     mkdir -p ~/.ssh
      #     ssh-keyscan -H ${{ matrix.server.host }} >> ~/.ssh/known_hosts

      - name: Setup SSH key and known hosts on ${{ matrix.server.name }}
        uses: kielabokkie/ssh-key-and-known-hosts-action@v1
        with:
          ssh-private-key: ${{ secrets[matrix.server.private_key] }}
          ssh-host: ${{ matrix.server.host }}

      # - name: Install SSH Key on ${{ matrix.server.name }}
      #   uses: shimataro/ssh-key-action@v2
      #   with:
      #     key: ${{ secrets[matrix.server.private_key] }}
      #     name: id_rsa
      #     #known_hosts: ${{ secrets.SERVER_SSH_HOST }}
      #     known_hosts: unnecessary

      - name: Upload files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ matrix.server.host }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets[matrix.server.private_key] }}
          source: ./tmp
          target: ${{ matrix.server.target }}.tmp

      - name: Save old version and copy new version
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ matrix.server.host }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets[matrix.server.private_key] }}
          port: 22
          script: |
            rm -rf ${{ matrix.server.target }}.old
            mv ${{ matrix.server.target }}/ ${{ matrix.server.target }}.old/
            rsync -r ${{ matrix.server.target }}.tmp/tmp/ ${{ matrix.server.target }}/
            rm -rf ${{ matrix.server.target }}.tmp
